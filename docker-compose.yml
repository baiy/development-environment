version: '3.2'

services:
  nginx:
    build:
      context: ./service/nginx
    privileged: true
    ports:
      - "${NGINX_HTTP_HOST_PORT}:80"
      - "${NGINX_HTTPS_HOST_PORT}:443"
    volumes:
      - ${NGINX_DIR}nginx.conf:/etc/nginx/nginx.conf
      - ${APPLICATION_DIR}:/etc/nginx/html/
      - ${DATA_DIR}nginx/conf.d/:/etc/nginx/conf.d/
      - ${DATA_DIR}logstash/data/nginx:/var/log/nginx/

  openvpn:
    build:
        context: ./service/openvpn
    privileged: true
    ports:
      - "${OPENVPN_SOCKS5_PROXY_PORT}:1080"
    volumes:
      - ${DATA_DIR}openvpn/:/vpn/

  mysql57:
    build:
      context: ./service/mysql/57
    privileged: true
    ports:
      - "3306:3306"
    volumes:
      - ${DATA_DIR}mysql/57/:/var/lib/mysql
      - ${MYSQL_DIR}57/my.cnf:/etc/mysql/conf.d/my.cnf
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}

  redis:
    build:
      context: ./service/redis
    privileged: true
    ports:
      - "6379:6379"
    volumes:
      - ${REDIS_DIR}redis.conf:/usr/local/etc/redis/redis.conf
      - ${DATA_DIR}redis/:/data

  anyproxy:
    build:
      context: ./service/anyproxy
      args:
        CONTAINER_TIME_ZONE: ${CONTAINER_TIME_ZONE}
        CONTAINER_CHANGE_SOURCE: ${CONTAINER_CHANGE_SOURCE}
    privileged: true
    ports:
      - "8001:8001"
      - "8002:8002"
    volumes:
      - ${ANYPROXY_RULE_DIR}relu/:/anyproxy/
      - ${ANYPROXY_RULE_DIR}certificates/:/root/.anyproxy/certificates/

  grafana:
    build:
      context: ./service/grafana
      args:
        CONTAINER_TIME_ZONE: ${CONTAINER_TIME_ZONE}
        CONTAINER_CHANGE_SOURCE: ${CONTAINER_CHANGE_SOURCE}
    privileged: true
    ports:
      - "3000:3000"
    volumes:
      - ${DATA_DIR}grafana/:/var/lib/grafana
      - ${GRAFANA_DIR}custom.ini:/etc/grafana/grafana.ini

  elasticsearch:
    build:
      context: ./service/elk/elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./service/elk/elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: bind
        source: ${DATA_DIR}elasticsearch/
        target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx500m -Xms500m"
      # Use single node discovery in order to disable production mode and avoid bootstrap checks
      # see https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node

  logstash:
    build:
      context: ./service/elk/logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./service/elk/logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ${DATA_DIR}logstash/config
        target: /usr/share/logstash/pipeline
      - type: bind
        source: ${DATA_DIR}logstash/data
        target: /logstash/data
    ports:
      - "5000:5000"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    depends_on:
      - elasticsearch

  kibana:
    build:
      context: ./service/elk/kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./service/elk/kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch